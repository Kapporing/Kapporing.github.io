{"version":3,"sources":["NavigationBar.tsx","Memories.tsx","About.tsx","ProjectPreview.tsx","Home.tsx","Resume.tsx","NotFound.tsx","HuskyMaps.tsx","Pong.tsx","MiniSearchEngine.tsx","App.tsx","index.tsx"],"names":["NavigationBar","Container","Navbar","fixed","collapseOnSelect","expand","variant","bg","Toggle","Collapse","Nav","className","Link","style","marginLeft","marginRight","color","href","Memories","Row","this","props","picturePath","Col","xs","order","alignLeft","Image","width","src","fluid","rounded","fontSize","description","Component","About","countItems","sm","md","lg","xl","marginTop","span","offset","onClick","window","open","height","alt","to","url","target","bgColor","delay","bottom","opposite","hidden","ProjectPreview","paddingTop","paddingBottom","heading","Button","pathToPage","Home","marginBottom","fontFamily","smooth","duration","margin","borderWidth","backgroundImage","backgroundPosition","name","padding","Resume","id","NotFound","HuskyMaps","ListGroup","Item","frameBorder","allowFullScreen","Tabs","defaultActiveKey","Tab","eventKey","title","Pong","MiniSearchEngine","Carousel","interval","App","exact","path","component","scroll","scrollTo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fab60b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\r\nimport './App.css';\r\n\r\nfunction NavigationBar() {\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar fixed=\"top\" collapseOnSelect expand=\"md\" variant=\"light\" bg=\"white\">\r\n                <Navbar.Toggle/>\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link style={{marginLeft: \"20px\", marginRight: \"20px\", color: \"#0d4d00\"}} href=\"/\">Home</Nav.Link>\r\n                        <Nav.Link style={{marginLeft: \"20px\", marginRight: \"20px\", color: \"#0d4d00\"}} href=\"/about\">About</Nav.Link>\r\n                        <Nav.Link style={{marginLeft: \"20px\", marginRight: \"20px\", color: \"#0d4d00\"}} href=\"/resume\">Resume</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </Container>\r\n    );\r\n}\r\nexport default NavigationBar;","import React, {Component} from 'react';\r\nimport {Col, Container, Image, Row} from \"react-bootstrap\";\r\n\r\ninterface MemoriesProps {\r\n    picturePath: string;\r\n    description: string;\r\n    alignLeft: boolean;\r\n}\r\n\r\nclass Memories extends Component<MemoriesProps, {}> {\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"show-grid\">\r\n                    {this.props.picturePath === \"\"\r\n                        ? null\r\n                        : <Col xs={{order: this.props.alignLeft ? -1 : 1}}>\r\n                            <div className=\"text-center\">\r\n                                <Image width=\"50%\" src={this.props.picturePath} fluid rounded/>\r\n                            </div>\r\n                        </Col>}\r\n                    <Col>\r\n                        <div style={{fontSize: \"calc(0.5vw + 0.5vh + 1vmin)\"}}> {/*Responsive Text*/}\r\n                            <p>\r\n                                {this.props.description}\r\n                            </p>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Memories;","import React from 'react';\r\nimport {Col, Row, Image, Container} from \"react-bootstrap\";\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport {Fade} from 'react-reveal';\r\nimport Memories from \"./Memories\";\r\n\r\nfunction About() {\r\n\r\n    const childhoodDesc: string =   \"I don't quite remember having my picture taken for this but I'm glad that it exists! \" +\r\n                                    \"I think this was taken when I was 4 years old or so. It was taken back in my home country, \" +\r\n                                    \"Jakarta, Indonesia. I've always been drawn to the computer behind me in that picture, I remember \" +\r\n                                    \"using it when it was still running Windows XP (it's not THAT old, but still a relic of the past!) 😎\";\r\n\r\n    const familyDesc: string =  \"This is my family! I've got two older sisters as well as a younger brother. \" +\r\n                                \"Even though I hardly get to see them, I really do treasure the small fragments of \" +\r\n                                \"time we spend together!😁\";\r\n\r\n    const kappaDesc: string =   \"I spent a lot of time moving around as a child. Originally from Indonesia, I moved to Singapore \" +\r\n                                \"when I was ~8 years old and spent another half of my life there. I've made some really great friends, \" +\r\n                                \"among them are those shown in the picture here!\";\r\n\r\n\r\n    const mrseahDesc: string =  \"During my time in Singapore, I've had A LOT of great memories. Some of my best, though, came \" +\r\n                                \"from the time I spent in secondary school. For example, here's Mr Seah, my favorite Math teacher from school! \";\r\n\r\n\r\n    const fishDesc: string =    \"After a while, it was time for me to move again and start the next chapter in life.\\n\" +\r\n                                \"I moved to Seattle in 2018 and have been loving it ever since. \" +\r\n                                \"This is me getting my picture taken at Pike Place Market! It feels great to experience cold weather for once 😍\";\r\n\r\n\r\n    const sccDesc: string =     \"Finally, this was a picture taken in Shoreline Community College. When I came to Seattle, \" +\r\n                                \"I started out at this institution and I'm so glad I did, because of the friends that I've made \" +\r\n                                \"along the way, while working as part of SCC's Student Government!\";\r\n\r\n    let countItems: number = 0;\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12} sm={12} md={12} lg xl={6}>\r\n                        <div style={{marginTop: \"130px\"}} className=\"text-center\">\r\n                            <Image width=\"60%\" src=\"assets/images/uw.jpeg\" fluid rounded/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg xl={{ span: 5, offset: 1 }}>\r\n                        <div style={{marginTop: \"20px\"}}>\r\n                            <h1 style={{fontSize: \"60px\"}}> Hello, World! </h1>\r\n                            <p>\r\n                                Well, hello there! I'm Ronald William, an undergraduate\r\n                                student at the University of Washington -\r\n                                Seattle <img src=\"assets/icons/uwlogo.png\" onClick={() => window.open(\"http://cs.uw.edu\", '_blank')} width=\"20px\" height=\"20px\" alt=\"UW Icon\"/> studying Computer Science\r\n                                expecting to graduate in Spring 2021!\r\n                                <br/>\r\n                                <br/>\r\n                                I love to play video games and code! :P\r\n                                <br/>\r\n                                I love programming in C/C++ and Java. I've done some pretty cool projects that you can take\r\n                                a look at the <Link to=\"/home\">home page</Link>! &#129321; I've recently\r\n                                started exploring more UI/UX design and frankly, I'm obsessed with it! Not great, but I'm learning!\r\n                                <br/>\r\n                            </p>\r\n                            <br/>\r\n                            <h5>Catch me elsewhere:</h5>\r\n                            <Row className=\"justify-content-center\">\r\n                                <SocialIcon url=\"http://linkedin.com/in/ronaldwilliamwidjaja\" target=\"_blank\"/>\r\n                                <SocialIcon url=\"https://www.instagram.com/rwwidjaj/\" target=\"_blank\" bgColor=\"#C13584\"/>\r\n                                <SocialIcon url=\"http://github.com/Kapporing\" target=\"_blank\" bgColor=\"333\"/>\r\n                                <SocialIcon url=\"mailto:rwwidjaj@uw.edu\" bgColor=\"#ed6b00\"/>\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <Container>\r\n                <h1 style={{fontSize: \"50px\"}} > My Life in Pictures! </h1>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <Fade delay={200} bottom opposite>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/smallboi.jpeg\" description={childhoodDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/family.jpeg\" description={familyDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/kappa.jpeg\" description={kappaDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/mrseah.jpeg\" description={mrseahDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/fish.jpeg\" description={fishDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                    <Memories alignLeft={!!(countItems % 2)} picturePath=\"assets/images/scc.jpeg\" description={sccDesc}/>\r\n                    <br/> <p hidden>{countItems++} </p>\r\n                </Fade>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {Container, Button} from \"react-bootstrap\";\r\n\r\ninterface ProjectPreviewProps {\r\n    description: string;\r\n    heading: string;\r\n    pathToPage: string;\r\n}\r\n\r\nfunction ProjectPreview(props: ProjectPreviewProps) {\r\n    return (\r\n        <>\r\n            <Container style={{paddingTop: \"20em\", paddingBottom: \"20em\"}}>\r\n                <h1 className=\"text-left\" style={{fontSize: \"60px\"}}>{props.heading}</h1>\r\n                <div>\r\n                    <h5>{props.description}</h5>\r\n                </div>\r\n                <Button href={props.pathToPage} variant=\"success\">\r\n                    More\r\n                </Button>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProjectPreview;","import React from 'react';\r\nimport ProjectPreview from \"./ProjectPreview\";\r\nimport {Container, Col, Row, Button} from \"react-bootstrap\";\r\nimport {Fade} from 'react-reveal';\r\nimport { Link as ScrollLink, Element } from 'react-scroll'\r\n\r\n\r\nfunction Home() {\r\n\r\n    const huskyMapDesc: string = \"Pathfinding application for Seattle area made with Java with MapBox and OpenStreetMap APIs\";\r\n    const searchEngineDesc: string = \"Multithreaded Mini-Search Engine built with C/C++\";\r\n    const pongDesc: string = \"The game, Pong, made with Java's Swing library\";\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container style={{marginTop: \"17em\", marginBottom: \"17em\"}}>\r\n                <Col className=\"text-center\">\r\n                    <h1 style={{fontSize: \"4em\", fontFamily: \"'Fredoka One', cursive\", color: \"#6cb360\"}}> Ronald William Widjaja </h1>\r\n                    <p style={{fontSize: \"40px\"}}> Software Developer</p>\r\n                </Col>\r\n            </Container>\r\n            <Container style={{marginBottom: \"3em\"}}>\r\n                <h1 className=\"text-center\">Projects</h1>\r\n                <Row className=\"justify-content-center\">\r\n                    <ScrollLink to=\"huskymaps\" smooth={true} duration={500}>\r\n                        <Button variant=\"outline-success\" style={{margin: \"5px\", width: \"200px\"}}>\r\n                            HuskyMaps\r\n                        </Button>\r\n                    </ScrollLink>\r\n                    <ScrollLink to=\"searchengine\" smooth={true} duration={500}>\r\n                        <Button variant=\"outline-success\" style={{margin: \"5px\",width: \"200px\"}}>\r\n                            Mini Search-Engine\r\n                        </Button>\r\n                    </ScrollLink>\r\n                    <ScrollLink to=\"pong\" smooth={true} duration={500}>\r\n                        <Button variant=\"outline-success\" style={{margin: \"5px\",width: \"200px\"}}>\r\n                            Pong\r\n                        </Button>\r\n                    </ScrollLink>\r\n                </Row>\r\n            </Container>\r\n            <Fade delay={200}>\r\n                <hr style={{borderWidth: \"5px\", marginTop: \"20em\", paddingBottom: \"0px\", marginBottom:\"0px\"}}/>\r\n                <Container style={{backgroundImage: `url(assets/images/huskymaps/huskymaps.jpg)`, backgroundPosition: \"center\"}} fluid>\r\n                        <Element name=\"huskymaps\">\r\n                            <ProjectPreview heading=\"HuskyMaps\" description={huskyMapDesc} pathToPage={\"/huskymaps\"}/>\r\n                        </Element>\r\n                </Container>\r\n                <hr style={{borderWidth: \"5px\", padding: \"0px\", margin:\"0px\"}}/>\r\n                <Container style={{backgroundImage: `url(assets/images/searchengine/333gle.jpg)`, backgroundPosition: \"center\"}} fluid>\r\n                        <Element name=\"searchengine\">\r\n                            <ProjectPreview heading=\"Mini Search-Engine\" description={searchEngineDesc} pathToPage={\"/searchengine\"}/>\r\n                        </Element>\r\n                </Container>\r\n                <hr style={{borderWidth: \"5px\", padding: \"0px\", margin:\"0px\"}}/>\r\n                <Container style={{backgroundImage: `url(assets/images/pong/pong.jpg)`, backgroundPosition: \"center\"}} fluid>\r\n                    <Element name=\"pong\">\r\n                        <ProjectPreview heading=\"Pong\" description={pongDesc} pathToPage={\"/pong\"}/>\r\n                    </Element>\r\n                </Container>\r\n            </Fade>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\n\r\nfunction Resume() {\r\n    return (\r\n        <Container className=\"justify-content-center\">\r\n            <div className=\"text-center\">\r\n                <a href=\"assets/Resume-Ronald-June10.pdf\"><h2> Résumé </h2></a>\r\n                <br/>\r\n            </div>\r\n            <Col lg={10} style={{fontFamily: `'Karla', sans-serif`}}>\r\n                <Row>\r\n                    <Col sm={{span: 5, offset: 3}}>\r\n                        <div id=\"resume-education\">\r\n                            <h3><u>Education</u></h3>\r\n                            <div>\r\n                                <h5><strong>B.S Computer Science</strong></h5>\r\n                                <text><strong>University of Washington - Seattle</strong></text>\r\n                                <br/>\r\n                                <text><strong>Expected Graduation: June 2021 </strong></text>\r\n                                <br/>\r\n                                <text>Cumulative GPA: 3.65</text>\r\n                                <br/>\r\n                                <text><u>Relevant Coursework:</u></text>\r\n                                <br/>\r\n                                <text> Hardware-Software Interface,\r\n                                    Data Structures, Systems Programming,\r\n                                    Software Design, Database Management</text>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <h5><strong>A.S  Associate in Science</strong></h5>\r\n                                <text><strong>Shoreline Community College</strong></text>\r\n                                <br/>\r\n                                <text><strong>June 2019 </strong></text>\r\n                                <br/>\r\n                                <text>Cumulative GPA: 3.95</text>\r\n                                <br/>\r\n                                <text><u>Relevant Coursework:</u></text>\r\n                                <br/>\r\n                                <text> Java Programming, Python Programming,\r\n                                    Public Speaking, Calculus Series, Physics Series</text>\r\n                            </div>\r\n                        </div>\r\n                        <hr/>\r\n                        <div id=\"resume-projects\">\r\n                            <h3><u>Programming Projects</u></h3>\r\n                            <br/>\r\n                            <div>\r\n                                <h5><b>Husky Maps</b></h5>\r\n                                <p>\r\n                                    Google-Maps like Java application to find the shortest-path directions\r\n                                    from one location to another in the Seattle area using the OpenStreetMaps and MapBox API\r\n                                </p>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <h5><b>Mini Search-Engine</b></h5>\r\n                                <p>\r\n                                    Multi-threaded search engine built from scratch using the C/C++ programming language.\r\n                                    Uses the layout of a typical search-engine to crawl through file directories and index them\r\n                                    to serve over the network.\r\n                                </p>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <h5><b>Sudoku Solver</b></h5>\r\n                                <p>\r\n                                    Sudoku Solver that reads in boards of type <code>.sdk</code> and <code>.ss</code> and\r\n                                    fills in the empty spots in the boards.\r\n                                </p>\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <h5><b>Pong</b></h5>\r\n                                <p>\r\n                                    A simple game of Pong, made using Java's Swing library.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <div id=\"resume-technicalskills\">\r\n                            <h3><u>Technical Skills</u></h3>\r\n                            <ul>\r\n                                <li>Java</li>\r\n                                <li>C/C++</li>\r\n                                <li>Python</li>\r\n                                <li>Swift</li>\r\n                                <li>SQL</li>\r\n                                <li>NoSQL: Cypher, SQL++</li>\r\n                            </ul>\r\n                            <ul>\r\n                                <li>HTML</li>\r\n                                <li>CSS/Bootstrap Framework</li>\r\n                                <li>JavaScript/TypeScript</li>\r\n                                <li>ReactJS</li>\r\n                            </ul>\r\n                            <ul>\r\n                                <li>Linux/Bash</li>\r\n                                <li>Database Clustering</li>\r\n                            </ul>\r\n                        </div>\r\n                        <hr/>\r\n                        <div id=\"resume-otherexperience\">\r\n                            <h3><u>Other Experience</u></h3>\r\n                            <div>\r\n                                <h5><b>Research Assistant - Nanyang Polytechnic</b></h5>\r\n                                <p>\r\n                                    Volunteer Research Assistant in Nanyang Polytechnic, Singapore. Conducted a research\r\n                                    project with a mentor to answer the question of \"what makes a good presentation?.\"\r\n                                    Explored the properties of presentations, such as their use of aesthetics in figuring out\r\n                                    the right combination to produce an eye-catching and pleasant presentation.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport {Container, Image} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"justify-content-center\" style={{marginTop: \"3em\"}}>\r\n                <div className=\"text-center\">\r\n                    <h1> Uh-oh looks like the page you're looking for can't be found! :( </h1>\r\n                    <br/>\r\n                    <h4> Here's a picture of dubs to help you find what you're looking for</h4>\r\n                    <p> 🐶 When you're ready, click on Dubs to get back Home! 🐺</p>\r\n                    <Link to=\"/home\">\r\n                        <Image width=\"100%\" src=\"assets/images/dubs.jpg\" rounded/>\r\n                    </Link>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport {Col, Container, Image, ListGroup, Row, Tab, Tabs} from \"react-bootstrap\";\r\n\r\nfunction HuskyMaps() {\r\n    return(\r\n        <>\r\n            <Container style={{marginTop: \"5em\"}}>\r\n                <Row>\r\n                    <Col lg xl={{ span: 4, offset: 1 }}>\r\n                        <h1 style={{fontSize: \"60px\"}}> Husky Maps </h1>\r\n                        <ListGroup>\r\n                            <ListGroup.Item variant=\"warning\"><b>Part of a School Project!</b></ListGroup.Item>\r\n                            <ListGroup.Item variant=\"info\"><b>Time:</b> 3 Months</ListGroup.Item>\r\n                            <ListGroup.Item variant=\"info\"><b>Language and Utilities:</b> Java, OpenStreetMap API, MapBox APIs</ListGroup.Item>\r\n                        </ListGroup>\r\n                        <br/>\r\n                    </Col>\r\n                    <Col xs={12} sm={12} md={12} lg xl={7}>\r\n                        <div className=\"text-center\">\r\n                            <Image width=\"100%\" src=\"assets/images/huskymaps/thumbnail.jpg\" rounded/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <hr/>\r\n            </Container>\r\n            <Container className=\"justify-content-center\">\r\n                <div className=\"text-center\">\r\n                    <h2> Design and Outcome </h2>\r\n                    <br/>\r\n                </div>\r\n                <Col lg={10}>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                                <h3> Overview </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                First, we start by analyzing the details of what the Husky Maps application needs.\r\n                                As a visualization, the below image describes the overall steps we will take to build\r\n                                the application.\r\n                                <br/>\r\n                                <br/>\r\n                                <Image width=\"100%\" src=\"assets/images/huskymaps/overview.jpg\" rounded/>\r\n                                <br/>\r\n                                <br/>\r\n                                First we need to start off with the auto-complete function, which is used to return suggestions\r\n                                of possible matches of places that the user is currently trying to type.\r\n                                Then, we use the information that we have from the MapBox and OpenStreetMap APIs to get a list\r\n                                of points and directions out of that point to navigate through the map. Finally, we get the shortest path\r\n                                between two points that the user has selected and display it on the App.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Autocomplete </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The first part of our HuskyMaps app is the Autocomplete function.\r\n                                Given a list of locations as well as their <em>weight</em> (how likely they are to be suggested),\r\n                                predict how likely it is that the user is typing each query and present the user a list of the top-matching queries, in descending order of weight.\r\n                                The way we do this efficiently is by having having a class that stores the country as a <code>String</code> as well as its\r\n                                weight as a <code>long</code>, then doing a binary search over all the terms.\r\n                                Since the weight can be extremely high, we choose to use <code>long</code> instead\r\n                                of <code>int</code> to prevent Integer overflow.\r\n                                <br/>\r\n                                As a checkpoint, we also had a GUI to ensure its correctness as well as a sort of visualization for the end goal.\r\n                                <br/>\r\n                                <br/>\r\n                                <Image width=\"100%\" src=\"assets/images/huskymaps/autocompletegui.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> K-D Tree </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                A K-Dimensional Tree is essentially a binary search tree that uses a K-tiered approach in\r\n                                determining the position of a Node in the tree. Since we do not have infinitely many points, if a user clicks on a point\r\n                                on the map, we need to be able to know the closest point to the user's click.\r\n                                <br/>\r\n                                In the case of the HuskyMaps app, since we are dealing with 2-Dimensional data, (i.e points have X and Y coordinates),\r\n                                we can efficiently store the points in a 2-Dimensional tree in order to do achieve a faster lookup time for a specific point or\r\n                                a point closest to the users' input. The runtime of a binary search is <code>&theta;(logN)</code>. However,\r\n                                the worst case scenario where a tree leans to one side would still yield <code>O(N)</code>.\r\n                                <br/>\r\n                                <Image width=\"50%\" src=\"assets/images/huskymaps/kdtree.jpg\" rounded/>\r\n                                <Image width=\"50%\" src=\"assets/images/huskymaps/kdtreevis.jpg\" rounded/>\r\n                                <br/>\r\n                                As seen above, the relationship between Cartesian points with a 2-D Tree is preserved.\r\n                                In some cases, we compare by the X-coordinates, whereas in others we compare by the Y-coordinates.\r\n                                This ensures a smooth partition along some x and y coordinates, as shown in the diagram above.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Shortest Path </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                Now that we've got a working K-D Tree, we can find the shortest path between two points, since we can find the\r\n                                nearest point to a user's click. There are many ways to find the shortest path, but the way that we will implement this\r\n                                is by using Dijkstra's shortest-path algorithm. Since edges out of a point are not weighted, Dijkstra provides an optimized\r\n                                point-to-point search between the start and ending nodes.\r\n                                <br/>\r\n                                <b>(NOTE: If the edges had non-negative weights, A star search would be better)</b> <br/>\r\n                                Refer to the below slides for more information of Depth-First Search, which is essentially\r\n                                the foundation of Dijkstra's algorithm. Our approach, however, assumes all weights are\r\n                                equal to 0.\r\n                                <iframe\r\n                                    src=\"https://docs.google.com/presentation/d/e/2PACX-1vTbjk2KxMfDBBVR4Ts7KEELnth1kAS42R5tDB0H-eYGfoqpGPO2D5xVB5hoUHxTsyd_9z7wMfxXKO6J/embed?start=false&amp;loop=false&amp;delayms=3000\"\r\n                                    frameBorder=\"0\" width=\"100%\" height=\"434\" allowFullScreen={true}/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Web Server </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                A large part of the web server has already been set up. The general idea of the web server\r\n                                is that we handle Requests sent to us by the Web UI via a set of RouteHandlers that\r\n                                handles requests based on its type. The user requests can include rastering, clearing routes, search for a given location, as well as\r\n                                searching for a route between two points. We return the response using JSON via Google's GSON API.\r\n                                <br/><br/>\r\n                                The way we implement the raster request is by sending back a matrix representing\r\n                                a \"Tile\" where each tile refers to a specific part of the map bounded by 2 Longitude and 2 Latitude\r\n                                (i.e the topLeftX, topLeftY, botRightX, and botRightY coordinates).\r\n                                <br/><br/>\r\n                                Then we handle the search for points request by using our Autocomplete interface. We\r\n                                try to match possible results from the user's query and return a list of possible matches to\r\n                                it.\r\n                                <br/><br/>\r\n                                We handle finding path between two points by using the Dijkstra's interface that we implemented, finding\r\n                                the nearest point of a user's click and then send it to the shortest path solver to find the nearest path\r\n                                and returns it as a list of points to be rendered client-side.\r\n                                <br/><br/>\r\n                                Clear routes just returns an empty list of points to be rendered, thereby clearing the routes\r\n                                that was already rendered.\r\n                                <br/><br/>\r\n                                Since a large part of this section was already implemented as part of the starter code,\r\n                                this assignment focuses less on concepts, but more on understanding existing code and\r\n                                integrating into it.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <div className=\"text-center\">\r\n                        <h2> Overall learning outcomes </h2>\r\n                        <br/>\r\n                    </div>\r\n                    <Row>\r\n                        <Col>\r\n                            <Tabs defaultActiveKey=\"autocomplete\" id=\"uncontrolled-tab\">\r\n                                <Tab eventKey=\"autocomplete\" title=\"Autocomplete\" style={{marginBottom: \"12em\"}}>\r\n                                    <br/>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"success\">Formally introduce asymptotic runtime requirements and exception handling.</ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Tab>\r\n                                <Tab eventKey=\"kdtree\" title=\"K-D Tree\" style={{marginBottom: \"8em\"}}>\r\n                                    <br/>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"success\">Compose algorithms via iterative improvement.</ListGroup.Item>\r\n                                        <ListGroup.Item variant=\"success\">Encapsulate complex behavior beneath a simple interface.</ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Tab>\r\n                                <Tab eventKey=\"shortestpath\" title=\"Shortest Path\" style={{marginBottom: \"8em\"}}>\r\n                                    <br/>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"success\">Debug a graph algorithm involving multiple data structures.</ListGroup.Item>\r\n                                        <ListGroup.Item variant=\"success\">Apply the graph solver design pattern.</ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Tab>\r\n                                <Tab eventKey=\"webserver\" title=\"Web Server\" style={{marginBottom: \"5em\"}}>\r\n                                    <br/>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"success\">Extending a large, existing code base.</ListGroup.Item>\r\n                                        <ListGroup.Item variant=\"success\">Wrangling slightly messy real-world datasets into useful data structures.</ListGroup.Item>\r\n                                        <ListGroup.Item variant=\"success\">Implementing an algorithm based on closed-form expressions.</ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Tab>\r\n                            </Tabs>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HuskyMaps;","import React from 'react';\r\nimport {Col, Container, Image, ListGroup, Row} from \"react-bootstrap\";\r\n\r\nfunction Pong() {\r\n    return(\r\n        <>\r\n            <Container style={{marginTop: \"5em\"}}>\r\n                <Row>\r\n                    <Col lg xl={{ span: 4, offset: 1 }}>\r\n                        <h1 style={{fontSize: \"60px\"}}> Pong </h1>\r\n                        <ListGroup>\r\n                            <ListGroup.Item variant=\"info\"><b>Time:</b> 1 week</ListGroup.Item>\r\n                            <ListGroup.Item variant=\"info\"><b>Language and Utilities:</b> Java, Java Swing</ListGroup.Item>\r\n                        </ListGroup>\r\n                        <br/>\r\n                    </Col>\r\n                    <Col xs={12} sm={12} md={12} lg xl={7}>\r\n                        <div className=\"text-center\">\r\n                            <Image width=\"100%\" src=\"assets/images/pong/pong.jpg\" rounded/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <hr/>\r\n            </Container>\r\n            <Container className=\"justify-content-center\">\r\n                <div className=\"text-center\">\r\n                    <h2> Design and Outcome </h2>\r\n                    <br/>\r\n                </div>\r\n                <Col lg={10}>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Overview </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                Pong was the first experience I've had in Java GUI programming. The Pong game itself has\r\n                                4 main components.\r\n                                <ul>\r\n                                    <li>Paddle</li>\r\n                                    <li>Ball</li>\r\n                                    <li>MainApp</li>\r\n                                    <li>Renderer</li>\r\n                                </ul>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Paddle </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The paddle is rendered simply by filling in a black rectangle on a specified height/width.\r\n                                Since the game consists of two players, the paddle is also identified by a paddleNumber member variable in its class declaration.\r\n                                It also contains an <code>update()</code> function that takes in a boolean on whether it's up or down movement. This function will be called\r\n                                on the main app class, where it will continue to render until stopped.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Ball </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The ball is probably the most interesting part as it handles collision between paddles.\r\n                                First off, since we need to calculate the angle at which it rebounds, the ball needs to know whether it's colliding\r\n                                against the Player 1 paddle or the Player 2 paddle. Then upon impact, it calculates the angle at which it needs to rebound\r\n                                by looking at the point of impact on the ball and on the paddle.\r\n                                <br/><br/>\r\n                                In addition, the ball also needs to know when to re-spawn or when it's past the bounds of the board. Upon doing so, it will\r\n                                update the score of each player. Therefore, the player's score is located in the Ball class.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Main App </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                This is where the game starts and ends. First, we create a JFrame that will be the board. Then we render\r\n                                the board (i.e set its color, fill the board) and add a <code>keyListener</code> object with the Main App component being the listener.\r\n                                This allows us to listen for user inputs and update the state of the board accordingly (i.e move paddle up/down, set the score, etc.)\r\n\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Renderer </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The renderer class is essentially a wrapper class that extends JPanel. Its main function is to provide\r\n                                the rendering capability of JPanel (mainly <code>paintComponent()</code>), and then passes it to\r\n                                the Pong object to be used to render the parts of the game such as the paddle and the ball.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <div className=\"text-center\">\r\n                        <h2> Overall learning outcomes </h2>\r\n                        <br/>\r\n                    </div>\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup>\r\n                                <ListGroup.Item variant=\"success\">Basic understanding of Java's Swing library.</ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Pong;","import React from 'react';\r\nimport {Carousel, Col, Container, Image, ListGroup, Row} from \"react-bootstrap\";\r\n\r\nfunction MiniSearchEngine() {\r\n    return(\r\n        <>\r\n            <Container style={{marginTop: \"5em\"}}>\r\n                <Row>\r\n                    <Col lg xl={{ span: 4, offset: 1 }}>\r\n                        <h1 style={{fontSize: \"60px\"}}> Mini Search Engine </h1>\r\n                        <ListGroup>\r\n                            <ListGroup.Item variant=\"warning\"><b>Part of a School Project!</b></ListGroup.Item>\r\n                            <ListGroup.Item variant=\"info\"><b>Time:</b> 3 Months</ListGroup.Item>\r\n                            <ListGroup.Item variant=\"info\"><b>Language and Utilities:</b> C/C++, pthreads, HTML</ListGroup.Item>\r\n                        </ListGroup>\r\n                        <br/>\r\n                    </Col>\r\n                    <Col xs={12} sm={12} md={12} lg xl={7}>\r\n                        <Carousel interval={3000}>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    width={600}\r\n                                    height={500}\r\n                                    className=\"d-block w-100\"\r\n                                    src=\"assets/images/searchengine/thumbnail.jpg\"\r\n                                    alt=\"first slide\"\r\n                                />\r\n                            </Carousel.Item>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    width={600}\r\n                                    height={500}\r\n                                    className=\"d-block w-100\"\r\n                                    src=\"assets/images/searchengine/333gle.jpg\"\r\n                                    alt=\"second slide\"\r\n                                />\r\n                            </Carousel.Item>\r\n                        </Carousel>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <hr/>\r\n            </Container>\r\n            <Container className=\"justify-content-center\">\r\n                <div className=\"text-center\">\r\n                    <h2> Design and Outcome </h2>\r\n                    <br/>\r\n                </div>\r\n                <Col lg={10}>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Overview </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                In order to build a search engine, we need to understand how we want it to work first.\r\n                                The way we can represent a search engine model, from a high level perspective, is to draw a diagram.\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/overview.jpg\" rounded/>\r\n                                <br/>\r\n                                As seen from above, the main steps that we'll have is Indexing and Serving.\r\n                                Since our search engine only searches from a list of pre-indexed websites as well as files\r\n                                and directories that are not indexed, we would not need a web crawler, but we still need\r\n                                file crawlers to find files and create indexes out of them. Then finally, after having a list of indexes,\r\n                                we can easily find the list of matches of words and the documents that contain them. This is done largely by the\r\n                                back-end server as well as the front-end UI.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> LinkedLists and HashTables </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The first step in implementing a search-engine is figuring out what data structures we're gonna need. Since\r\n                                this project's class is (somewhat) an introduction to both <b>C</b> and C++, the first part of this project\r\n                                was done in the C-programming language.\r\n                                <br/><br/>\r\n                                In order for us to know where the word is located and how many times it is, we need to know the position of <b>all</b> the matching words\r\n                                in a document. The data structure that comes to mind is a LinkedList. A LinkedList can store positions of a specific word in a document, thus\r\n                                making it a great choice of data structure to use to keep track of word positions. However, we would soon run into another\r\n                                issue of not knowing what the word actually is. This can be solved by using a HashTable, where the key of the Hash Table is the word and the value\r\n                                is a LinkedList of the word positions. It would look a little like this\r\n                                <br/>\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/linkedlist.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Creating Indices - File Parser </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The next part of the problem involves creating indices for our files.\r\n                                First we read the contents of a text file into memory and then parses the text file to look for words within it.\r\n                                As it finds words, it will build up a HashTable that contains one record for each word.\r\n                                Each record will contain a lowercase copy of the word, and also a sorted linked list.\r\n                                Each record of the linked list contains an offset within the file that the word appeared in.\r\n                                <br/>\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/fileparser.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Creating Indices - File Crawler </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                After figuring out the contents of the files, as well as the word position, we need to be able to\r\n                                look for directories and files that we can pass down to the Indexer. In addition, we want to be able to\r\n                                identify the documents by assigning a document ID to them. From then, we can build two HashTables\r\n                                that maps a key of documentID to a value of documentName as well as another HashTable that maps\r\n                                a hashed documentName to its documentID so that we can convert between them faster.\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/filecrawler.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Creating Indices - Indexer </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The last component of creating indices that we need is the indexer. Its job is to take each\r\n                                word from the HashTable produced by the Parser and then fold its contents into an inverted index.\r\n                                An inverted index is just a hash table that maps from a word to a \"posting list,\"\r\n                                which is a list of places that that word has been found. It would look something like this.\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/indexer.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Writing Indexes to Disk - Header </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                Keeping a search engine index in memory is problematic, since memory is expensive and also volatile.\r\n                                Therefore, we need a way to store in on disk in a big-endian representation, since this is the\r\n                                conventially used representation for portability. Generally, the layout will look something like the diagram\r\n                                on the right.\r\n                                <br/><br/>\r\n                                The header consists of metadata about the index file. For example, it includes a \"magic number\" which is used to\r\n                                identify the type of file it is (i.e format indicator). We always write the magic number at the last part, in case\r\n                                of any failure, it's easy to tell if the index is corrupt or not.\r\n                                <br/><br/>\r\n                                The next part is the checksum area, this is a mathematical hash value that represents a signature of the index file.\r\n                                This is used to check for corruption, since we can tell if the index is corrupt if the checksum in the header is not\r\n                                equal to the checksum we've recalculated from disk.\r\n                                <br/><br/>\r\n                                The next four bytes store the size of the doctable region of the file. The size is stored as a 32-bit, signed, big endian integer.\r\n                                <br/><br/>\r\n                                The final four bytes of the header store the size of the index region of the file, in exactly the same way.\r\n                            </p>\r\n                        </Col>\r\n                        <Col xs={2}>\r\n                            <Image width=\"100%\" src=\"assets/images/searchengine/diskindex.jpg\" rounded/>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Writing Indexes to Disk - DocTable </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The doctable is a hash table that stores a mapping from 64-bit document ID to an ASCII string representing the document's filename. This is the docid_to_docname HashTable that\r\n                                was built up in the creation of the indices, just stored in Disk.\r\n                                <br/><br/>\r\n                                Generally this is how the doctable part of the inverted index would look like.\r\n                                It consists of 3 main parts:\r\n                                <br/>\r\n                                The number of buckets inside the HashTable\r\n                                <br/>\r\n                                An array of <code>bucket_rec</code> records, which consists of two main pieces of information,\r\n                                that is the number of elements in the bucket's chain (i.e <code>chain len</code>)\r\n                                as well as the offset of the bucket within the index file (i.e <code>bucket position</code>)\r\n                                <br/>\r\n                                Finally it has the actual array of buckets. One bucket for each bucket in the HashTable.\r\n                                <br/>\r\n                                Each bucket, consists of an array of element positions. Since the elements\r\n                                are variable sized, we need to know the offset they are in the index file.\r\n                                <br/>\r\n                                It also consists of an array of elements, each containing bits of information such as the\r\n                                document ID, filename as well as the length of the filename.\r\n                                <br/><br/>\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/doctable.jpg\" rounded/>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Writing Indexes to Disk - Index </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                The index is the most complicated of the three regions within the index file.\r\n                                The great news is that it has pretty much the same structure as the doctable:\r\n                                it is just a hash table, laid out exactly the same way.\r\n                                The only part of the index that differs from the doctable is the structure of each element.\r\n                                Refer to the pictures below for a visualization\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm={{span: 4, offset: 3}}>\r\n                            <Image width=\"100%\" src=\"assets/images/searchengine/index.jpg\" rounded/>\r\n                        </Col>\r\n                        <Col sm={{span: 4}}>\r\n                            <Image width=\"100%\" src=\"assets/images/searchengine/indexdoctable.jpg\" rounded/>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <Row>\r\n                        <Col sm={{span: 3, offset: 3}}>\r\n                            <h3> Search Engine Server </h3>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>\r\n                                Our web server is a fairly straightforward multithreaded application. Every time a client connects to the server,\r\n                                the server dispatches a thread to handle all interactions with that client.\r\n                                Threads do not interact with each other at all, which greatly simplifies the design of the server.\r\n                                <Image width=\"100%\" src=\"assets/images/searchengine/threadarch.jpg\" rounded/>\r\n                                <br/>\r\n                                Essentially, each thread would continue to interact with the Client by waiting and listening\r\n                                for query requests and then the server will send a list of all matching documents with the query,\r\n                                and when the client clicks on a file, the server accepts the <code>GET</code> request and sends them back\r\n                                the file that the client selected.\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr/>\r\n                    <div className=\"text-center\">\r\n                        <h2> Overall learning outcomes </h2>\r\n                        <br/>\r\n                    </div>\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup>\r\n                                <ListGroup.Item variant=\"success\">Fundamentals of C/C++ as well as their libraries</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"success\">Bug Journaling - Maintaining a list of occurred bugs to identify some common ones</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"success\">Basic networking and multithreading using C pthreads</ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MiniSearchEngine;","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport NavigationBar from \"./NavigationBar\";\nimport About from './About';\nimport Home from './Home';\nimport Resume from './Resume';\nimport NotFound from \"./NotFound\";\nimport HuskyMaps from \"./HuskyMaps\";\nimport Pong from \"./Pong\";\nimport MiniSearchEngine from \"./MiniSearchEngine\";\nimport {Button} from \"react-bootstrap\";\nimport {Fade} from 'react-reveal';\nimport { animateScroll as scroll } from 'react-scroll'\n\nclass App extends Component<{}, {}> {\n\n  render() {\n\n    return (\n        <>\n            <NavigationBar/>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/home\" component={Home} />\n                    <Route exact path=\"/about\" component={About} />\n                    <Route exact path=\"/resume\" component={Resume}/>\n                    <Route exact path=\"/huskymaps\" component={HuskyMaps} />\n                    <Route exact path=\"/searchengine\" component={MiniSearchEngine} />\n                    <Route exact path=\"/pong\" component={Pong} />\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n            <br/>\n            <br/>\n            <Fade bottom>\n                <div className=\"text-center\">\n                    <Button variant=\"outline-success\" onClick={() => scroll.scrollTo(0)}> Back To Top </Button>\n                </div>\n            </Fade>\n        </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}